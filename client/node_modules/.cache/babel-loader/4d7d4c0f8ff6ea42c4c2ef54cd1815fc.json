{"ast":null,"code":"var _jsxFileName = \"C:\\\\user\\\\Inv_System\\\\inv_System\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // On mount, check both localStorage and sessionStorage for token\n  useEffect(() => {\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (Date.now() < decoded.exp * 1000) {\n          // Always use the decoded JWT data for consistency\n          setUser(decoded);\n        } else {\n          localStorage.removeItem('token');\n          sessionStorage.removeItem('token');\n          setUser(null);\n        }\n      } catch {\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('token');\n        setUser(null);\n      }\n    }\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    const res = await fetch('http://localhost:5000/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!res.ok) {\n      const data = await res.json();\n      throw new Error(data.message || 'Login failed');\n    }\n    const data = await res.json();\n    localStorage.setItem('token', data.token);\n\n    // Decode the token to get user info consistently\n    try {\n      const decoded = jwtDecode(data.token);\n      setUser(decoded); // Use decoded token data instead of data.user\n    } catch (error) {\n      console.error('Failed to decode token:', error);\n      // Fallback to using data.user if token decode fails\n      setUser(data.user);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n    setUser(null);\n  };\n  const checkToken = () => {\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const decoded = jwtDecode(token);\n      if (Date.now() >= decoded.exp * 1000) {\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('token');\n        return false;\n      }\n      return true;\n    } catch {\n      localStorage.removeItem('token');\n      sessionStorage.removeItem('token');\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      checkToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","token","localStorage","getItem","sessionStorage","decoded","Date","now","exp","removeItem","login","username","password","res","fetch","method","headers","body","JSON","stringify","ok","data","json","Error","message","setItem","error","console","logout","checkToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/user/Inv_System/inv_System/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // On mount, check both localStorage and sessionStorage for token\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token);\r\n        if (Date.now() < decoded.exp * 1000) {\r\n          // Always use the decoded JWT data for consistency\r\n          setUser(decoded);\r\n        } else {\r\n          localStorage.removeItem('token');\r\n          sessionStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n      } catch {\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n        setUser(null);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    const res = await fetch('http://localhost:5000/api/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n    if (!res.ok) {\r\n      const data = await res.json();\r\n      throw new Error(data.message || 'Login failed');\r\n    }\r\n    const data = await res.json();\r\n    localStorage.setItem('token', data.token);\r\n    \r\n    // Decode the token to get user info consistently\r\n    try {\r\n      const decoded = jwtDecode(data.token);\r\n      setUser(decoded); // Use decoded token data instead of data.user\r\n    } catch (error) {\r\n      console.error('Failed to decode token:', error);\r\n      // Fallback to using data.user if token decode fails\r\n      setUser(data.user);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    sessionStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  const checkToken = () => {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      if (Date.now() >= decoded.exp * 1000) {\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch {\r\n      localStorage.removeItem('token');\r\n      sessionStorage.removeItem('token');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, checkToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}